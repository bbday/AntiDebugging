<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>latest</LangVersion>
    <Version>1.1.1</Version>
    <Authors>Behzad Khosravifar</Authors>
    <Description>C# Anti-Debug and Anti-Dumping techniques using Win32/NT API functions. There are certain functions/methods like the anti-dump that were created by other people.</Description>
    <Copyright />
    <PackageTags>antidebug, antidebugging, net-antidebug, antidump, anti-virtualmachine, antivm, anti-emulation</PackageTags>
    <PackageReleaseNotes>* PoC: Prevent a debugger from attaching to managed .NET processes via a watcher process code pattern.
* Anti Virtual Machine &amp; VPS
* Anti Dump - Clears headers and some secret magic ontop (WARNING! It breaks applications which are obfuscated)
* Check for managed debugger
* Check for unmanaged debugger
* Check for remote debugger
* Check debug port
* Detach from debugger process
* Check for kernel debugger
* Hides current process OS thread ( managed threads soon )
* Scan and Kill debuggers (ollydbg, x32dbg, x64dbg, Immunity, MegaDumper, etc)</PackageReleaseNotes>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.ComponentModel" Version="4.3.0" />
    <PackageReference Include="System.Management" Version="4.7.0" />
    <PackageReference Include="System.Security.Principal.Windows" Version="4.7.0" />
  </ItemGroup>

</Project>
